0
00:00:00,380 --> 00:00:03,840
Now that you have learned about the 4-Layer Internet model, we are going to focus on the

1
00:00:03,840 --> 00:00:07,370
Network Layer. This is the most important layer of the Internet

2
00:00:07,370 --> 00:00:12,010
– in fact, to many people it *is* the Internet. Whenever we use the Internet we are required

3
00:00:12,010 --> 00:00:15,480
to use the Internet Protocol to send and receive packets.

4
00:00:15,480 --> 00:00:21,189
You’ll remember that we say each layer provides a “service” to the layer above. In order

5
00:00:21,189 --> 00:00:25,489
to correctly use a layer, we need a good understanding of the service it provides.

6
00:00:25,489 --> 00:00:31,050
Therefore, in this video I will walk through the service provided by the Internet Protocol.

7
00:00:31,050 --> 00:00:35,770
IP datagrams consist of a header and some data.

8
00:00:35,770 --> 00:00:40,120
When the transport layer has data to send, it hands a Transport Segment to the Network

9
00:00:40,120 --> 00:00:42,190
layer below. &lt;click to drop transport segment into IP datagram&gt;

10
00:00:42,190 --> 00:00:48,870
The network layer puts the transport segement inside a new IP datagram. IP’s job is to

11
00:00:48,870 --> 00:00:55,620
deliver the datagram to the other end. But first, the IP datagram has to make it

12
00:00:55,620 --> 00:00:59,710
over the first link to the first router. &lt;click to put IP datagram inside Link frame&gt;

13
00:00:59,710 --> 00:01:04,259
IP sends the datagram to the Link Layer that puts it inside a Link frame, such as an Ethernet

14
00:01:04,259 --> 00:01:07,789
packet and ships it off to the first router.

15
00:01:07,789 --> 00:01:13,560
The IP service can be characterized by four properties listed here. It sends Datagrams

16
00:01:13,560 --> 00:01:18,560
from end host to end host; it is unreliable, but makes a best-effort to deliver the datagrams.

17
00:01:18,560 --> 00:01:22,469
The network maintains no per-flow state associated with the datagrams.

18
00:01:22,469 --> 00:01:26,569
Let’s take a look at each one in turn as listed in the table……

19
00:01:26,569 --> 00:01:33,569
First, IP is a datagram service. When we ask IP to send some data for us, it creates a

20
00:01:33,899 --> 00:01:39,600
datagram and puts our data inside. The datagram is a packet that is routed individually through

21
00:01:39,600 --> 00:01:45,700
the network based on the information in its header. In other words, the datagram is self-contained.

22
00:01:45,700 --> 00:01:50,689
The header contains the IP address of the destination, which we abbreviate here as “IP

23
00:01:50,689 --> 00:01:57,689
DA” for IP destination address. The forwarding decision at each router is based on the IP

24
00:01:58,420 --> 00:02:03,810
DA. The datagram header also contains an IP source address, or “IP SA”, saying where

25
00:02:03,810 --> 00:02:10,220
the packet came from, so the receiver knows where to send any response.

26
00:02:10,220 --> 00:02:13,850
Datagrams are routed hop-by-hop through the network from one router to the next, all the

27
00:02:13,850 --> 00:02:19,760
way from the IP source address to the IP destination address . We’ll learn more about how routers

28
00:02:19,760 --> 00:02:23,700
work later. But for now, it’s enough to know that each router contains a forwarding

29
00:02:23,700 --> 00:02:29,670
table that tells it where to send packets matching a given destination address. The

30
00:02:29,670 --> 00:02:33,650
router doesn’t know the whole path – it simply uses the destination address to index

31
00:02:33,650 --> 00:02:38,150
into its forwarding table so that it can forward the packet to the next hop along the path

32
00:02:38,150 --> 00:02:43,640
towards its final destination. Hop by hop, step by step the packet makes its way from

33
00:02:43,640 --> 00:02:50,190
the source to the destination using only the destination address in the datagram.

34
00:02:50,190 --> 00:02:54,510
You will often hear the analogy made between how IP datagrams are routed and how letters

35
00:02:54,510 --> 00:02:59,370
are routed by the postal service. It’s a good analogy. In the postal service, we put

36
00:02:59,370 --> 00:03:03,340
a letter into the mail box with the address of the destination and the letter is routed

37
00:03:03,340 --> 00:03:07,940
– invisibly to us – hop by hop from sorting office to sorting office until it reaches

38
00:03:07,940 --> 00:03:12,480
its destination. Neither the sender or the receiver know – or need to know – the

39
00:03:12,480 --> 00:03:18,010
path taken by letters in the postal service or by datagrams in the Internet. The IP service

40
00:03:18,010 --> 00:03:25,010
model provides a service which includes the routing to the destination.

41
00:03:25,230 --> 00:03:32,230
Second, and perhaps surprisingly, IP is unreliable. IP makes no promise that packets will be delivered

42
00:03:35,820 --> 00:03:40,180
to the destination. They could be delivered late, out of sequence, or never delivered

43
00:03:40,180 --> 00:03:44,750
at all. It’s possible that a packet will be duplicated along the way, for example by

44
00:03:44,750 --> 00:03:51,380
a misbehaving router. The key thing to remember is that IP is unreliable and makes no guarantees.

45
00:03:51,380 --> 00:03:58,380
But it won’t drop datagrams arbitrarily just because it feels like it. That’s if

46
00:03:58,440 --> 00:04:04,330
you believe networks have feelings. IP does make the promise to only drop datagrams if

47
00:04:04,330 --> 00:04:09,120
necessary. For example, the packet queue in a router might fill up because of congestion,

48
00:04:09,120 --> 00:04:13,400
forcing the router to drop the next arriving packet. IP won’t make any attempt to resend

49
00:04:13,400 --> 00:04:18,470
the data – in fact, IP doesn’t tell the source that the packet was dropped. Similarly,

50
00:04:18,470 --> 00:04:22,690
a faulty routing table might cause a packet to be sent to the wrong destination. Or cause

51
00:04:22,690 --> 00:04:28,360
a packet to be duplicated by mistake. IP doesn’t makes no promises these errors won’t happen,

52
00:04:28,360 --> 00:04:33,230
nor does it detect them when they do. But IP does make the promise to only make these

53
00:04:33,230 --> 00:04:35,580
errors when necessary.

54
00:04:35,580 --> 00:04:42,580
In fact, the IP datagram service is very much like the basic postal service. The basic postal

55
00:04:42,880 --> 00:04:47,000
service makes no promise that our letters will be delivered on time, or that if we send

56
00:04:47,000 --> 00:04:52,710
2-3 letters on successive days that they will be received in the order they were sent, and

57
00:04:52,710 --> 00:04:56,500
it makes no promise they will be delivered at all (unless we pay for a more expensive

58
00:04:56,500 --> 00:04:59,320
end-to-end service to guarantee delivery).

59
00:04:59,320 --> 00:05:05,000
Really, when it comes down to it, IP is an extremely simple, minimal service. It maintains

60
00:05:05,000 --> 00:05:09,770
no state at all related to a communication. We say that a communication service is “connectionless”

61
00:05:09,770 --> 00:05:14,030
&lt;click to highlight connectionless&gt; because it doesn’t start by establishing some end

62
00:05:14,030 --> 00:05:19,100
to state associated with the communication. In other words, when we make a Skype call

63
00:05:19,100 --> 00:05:24,200
lasting several minutes and consisting of many IP datagrams, the IP layer maintains

64
00:05:24,200 --> 00:05:29,160
no knowledge of the call, and simply routes each datagram individually and independently

65
00:05:29,160 --> 00:05:34,900
of all the others.

66
00:05:34,900 --> 00:05:39,750
You might be wondering why the IP service is so simple. After all, it is the foundation

67
00:05:39,750 --> 00:05:45,010
of the entire Internet. Every communication over the Internet uses – must use – the

68
00:05:45,010 --> 00:05:50,680
IP service. Given how important the Internet is, wouldn’t it have been better to make

69
00:05:50,680 --> 00:05:56,860
IP reliable? After all, we did say that most applications want a reliable, byte-communication

70
00:05:56,860 --> 00:05:58,770
service.

71
00:05:58,770 --> 00:06:05,460
There are several reasons the IP service model was designed to be so simple.

72
00:06:05,460 --> 00:06:10,560
To keep the network simple, dumb and minimal. Faster, more streamlined and lower cost to

73
00:06:10,560 --> 00:06:17,240
build and maintain. It was believed that if the network is kept simple with very features

74
00:06:17,240 --> 00:06:22,960
and requirements, then packets could be delivered very quickly, and at low cost. The thinking

75
00:06:22,960 --> 00:06:27,710
was that a simple network could be made to run very fast using dedicated hardware. And

76
00:06:27,710 --> 00:06:31,540
given that the network is implemented by a large number of routers scattered throughout

77
00:06:31,540 --> 00:06:37,610
the network, if they could be kept simple then are likely to be more reliable, more

78
00:06:37,610 --> 00:06:44,610
affordable to maintain and will need to be upgraded less often.

79
00:06:45,750 --> 00:06:52,750
The end to end principle: Where possible, implement features in the end hosts. In the

80
00:06:54,350 --> 00:06:59,620
design of communication systems, there is a well known principle called the end-to-end

81
00:06:59,620 --> 00:07:04,210
principle that says that if you *can*correctly implement features at the end points then

82
00:07:04,210 --> 00:07:10,330
you should. We’ll study the end-to-end principle in more depth in later videos, but the basic

83
00:07:10,330 --> 00:07:15,180
idea is to place as much intelligence as possible at the end points – in our case, the source

84
00:07:15,180 --> 00:07:20,150
and destination computers. This can have several advantages, such as making sure the feature

85
00:07:20,150 --> 00:07:24,729
is implemented correctly for the application, and it is easier to evolve and improve a feature

86
00:07:24,729 --> 00:07:29,240
if it is implemented in software on end computers rather than baked into the hardware of the

87
00:07:29,240 --> 00:07:33,979
Internet. In the case of the Internet, it was decided that features such as reliable

88
00:07:33,979 --> 00:07:38,160
communications and controlling congestion should be done at the end points – by the

89
00:07:38,160 --> 00:07:43,090
source and destination computers, and not by the network. At the time, it was quite

90
00:07:43,090 --> 00:07:50,090
a radical suggestion and a very different design choice from the telephone system, which

91
00:07:50,199 --> 00:07:54,460
was originally built on the idea of simple handsets and a complicated feature-rich network

92
00:07:54,460 --> 00:07:59,139
of telephone switches. In later videos we will be studying the end-to-end principle

93
00:07:59,139 --> 00:08:03,590
as one of the important architectural principles of communication systems. We will see many

94
00:08:03,590 --> 00:08:07,990
examples of the end to end principle in action. For example, when we study the transport layer,

95
00:08:07,990 --> 00:08:13,080
we will see how the end hosts build a reliable communication service over the unreliable

96
00:08:13,080 --> 00:08:20,080
IP network service.

97
00:08:21,889 --> 00:08:28,889
Allows a variety of reliable (or unreliable) services to be built on top. If IP was reliable

98
00:08:28,949 --> 00:08:33,229
– in other words if any missing packets were retransmitted automatically – then

99
00:08:33,229 --> 00:08:39,760
it would not be ideal for some services. For example, in real time applications like a

100
00:08:39,760 --> 00:08:44,490
video chat, there might be no point in retransmitting lost data, because it might arrive too late

101
00:08:44,490 --> 00:08:50,550
to be useful. Instead, the application might choose to show a few blank pixels or use the

102
00:08:50,550 --> 00:08:56,800
pixels from the frame before. By not providing any reliability guarantees, IP lets the application

103
00:08:56,800 --> 00:09:03,800
choose the reliability service its needs. Works over any link layer: IP makes very few

104
00:09:07,540 --> 00:09:13,600
assumptions about the link layer. IP makes very little expectation of the Link layer

105
00:09:13,600 --> 00:09:17,630
below – the link could be wired or wireless, and requires no retransmission or control

106
00:09:17,630 --> 00:09:22,000
of congestion. Some people have said IP is so simple and makes so few assumptions about

107
00:09:22,000 --> 00:09:25,960
the underlying link layer that you could run IP over carrier pigeons. In fact, there is

108
00:09:25,960 --> 00:09:31,270
even an Internet standard telling you how to do it! Making IP run over any link layer

109
00:09:31,270 --> 00:09:36,520
made sense because the Internet was created specifically to interconnect existing networks

110
00:09:36,520 --> 00:09:43,520
(which is why it was called the Internet).

111
00:09:43,830 --> 00:09:49,060
In addition to the basic unreliable, best-effort, connectionless datagram service, IP also provides

112
00:09:49,060 --> 00:09:54,940
a few other carefully chosen services. The designers of IP tried very hard to find a

113
00:09:54,940 --> 00:10:00,080
balance between providing the bare minimum needed to make communication work, while not

114
00:10:00,080 --> 00:10:03,860
providing such a barebone service that it doesn’t really work.

115
00:10:03,860 --> 00:10:08,990
I’ll describe five features here and you will learn about each one of these features

116
00:10:08,990 --> 00:10:13,440
in later videos, so I won’t go into a lot of the details here. But I will briefly describe

117
00:10:13,440 --> 00:10:17,860
each one, so you understand the scope of the complete IP service.

118
00:10:17,860 --> 00:10:24,130
First, IP tries to prevent packets from looping forever. Because IP routers forward packets

119
00:10:24,130 --> 00:10:28,709
hop-by-hop across the Internet, it is possible for the forwarding table in a router to be

120
00:10:28,709 --> 00:10:34,959
wrong, causing a packet to start looping round and around following the same path. This is

121
00:10:34,959 --> 00:10:38,700
most likely to happen when the forwarding tables are changing and they temporarily get

122
00:10:38,700 --> 00:10:44,630
into an inconsistent state. Rather than try to prevent loops from ever happening – which

123
00:10:44,630 --> 00:10:49,709
would take a lot of complexity - IP uses a very simple mechanism to catch and then delete

124
00:10:49,709 --> 00:10:55,440
packets that appear to be stuck in a loop. To do this, IP simply adds a hop-count field

125
00:10:55,440 --> 00:11:01,990
in the header of every datagram. It is called the time to live, or TTL field. It starts

126
00:11:01,990 --> 00:11:08,080
out at a number like 128 and then is decremented by every router it passes through. If it reaches

127
00:11:08,080 --> 00:11:12,899
zero, IP concludes that it must be stuck in a loop and the router drops the datagram.

128
00:11:12,899 --> 00:11:18,589
It is a simple mechanism, typical of IP – it doesn’t guarantee loops won’t happen,

129
00:11:18,589 --> 00:11:23,160
it just tries to limit the damage caused by a flood of endlessly looping packets in the

130
00:11:23,160 --> 00:11:25,600
network.

131
00:11:25,600 --> 00:11:32,600
IP will fragment packets if they are too long. IP is designed to run over any kind of link.

132
00:11:34,690 --> 00:11:39,000
Most links have a limit on the size of the packets they can carry. For example, Ethernet

133
00:11:39,000 --> 00:11:45,250
can only carry packets shorter than 1500bytes long. If an application has more than 1500bytes

134
00:11:45,250 --> 00:11:51,130
to send, it has to be broken into 1500 pieces before sending in an IP datagram. Now, along

135
00:11:51,130 --> 00:11:56,080
the path towards the destination, a 1500byte datagram might need to go over a link that

136
00:11:56,080 --> 00:12:01,769
can only carry smaller packets, for example 1000 bytes. The router connecting the two

137
00:12:01,769 --> 00:12:07,899
links will fragment the datagram into two smaller datagrams. IP provides some header

138
00:12:07,899 --> 00:12:12,440
fields that we will see in a minute to help the router fragment the datagram into two

139
00:12:12,440 --> 00:12:17,470
self-contained IP datagrams, while providing the information the end host needs to correctly

140
00:12:17,470 --> 00:12:20,610
reassemble the data again.

141
00:12:20,610 --> 00:12:27,610
IP uses a header checksum to reduce chances of delivering a datagram to the wrong destination.

142
00:12:28,700 --> 00:12:34,130
IP includes a checksum field in the datagram header to try and make sure datagrams are

143
00:12:34,130 --> 00:12:38,610
delivered to the right location. It could be quite a security problem if packets are

144
00:12:38,610 --> 00:12:42,610
accidentally and frequently sent to the wrong place because of a mistake by a router along

145
00:12:42,610 --> 00:12:46,510
the way.

146
00:12:46,510 --> 00:12:53,089
There are two versions of IP in use today: IPv4, which is used today by over 90% of end

147
00:12:53,089 --> 00:12:58,260
hosts. It uses the 32bit addresses you are probably familiar with. Because we are running

148
00:12:58,260 --> 00:13:04,920
out of IPv4 addresses, the Internet is in a gradual transition to IPv6, which uses 128

149
00:13:04,920 --> 00:13:10,830
bit addresses instead. You’ll be learning about the details of IPv4 and IPv6 in later

150
00:13:10,830 --> 00:13:11,589
videos.

151
00:13:11,589 --> 00:13:18,589
Finally, IP allows new fields to be added to the datagram header. This is a mixed blessing.

152
00:13:20,580 --> 00:13:24,320
On the one hand, it allows new features to be added to the header that turn out to be

153
00:13:24,320 --> 00:13:30,029
important, but weren’t in the original standard. On the other hand, these fields need processing

154
00:13:30,029 --> 00:13:34,870
and so require extra features in the routers along the path, breaking the goal of a simple,

155
00:13:34,870 --> 00:13:39,350
dumb, minimal forwarding path. In practice, very few options are used or processed by

156
00:13:39,350 --> 00:13:40,709
the routers.

157
00:13:40,709 --> 00:13:47,709
I’m now going to show you the IPv4 header and explain what all the fields do. I don’t

158
00:13:49,930 --> 00:13:53,899
need you to remember where all the fields are (I don’t remember all their locations

159
00:13:53,899 --> 00:13:59,510
myself). But I do want you to know what each field does, because it helps you understand

160
00:13:59,510 --> 00:14:05,120
the scope of the IP service model. It should help cement your understanding, and make it

161
00:14:05,120 --> 00:14:10,209
really clear that IP doesn’t do a lot – it is a deliberately simple service.

162
00:14:10,209 --> 00:14:16,010
Here is a picture of an IPv4 header, which is the most common header in use today. I’ve

163
00:14:16,010 --> 00:14:23,010
drawn it here in 32 bit words, with “Bit 0” the first to be sent onto the wire.

164
00:14:23,730 --> 00:14:30,490
This shaded portion is the IPv4 header. It’s followed by data.

165
00:14:30,490 --> 00:14:33,550
The most important fields in the IP header are:

166
00:14:33,550 --> 00:14:37,610
The Destination IP address The Source IP address

167
00:14:37,610 --> 00:14:42,540
The Protocol ID, that tells us what is inside the data field. Essentially, it allows the

168
00:14:42,540 --> 00:14:47,329
destination end host to demultiplex arriving packets, sending them to the correct code

169
00:14:47,329 --> 00:14:54,329
to process the packet. If the Protocol ID has the value “6” then it tells us the

170
00:14:54,940 --> 00:15:00,519
data contains a TCP Segment, and so we can safely pass the datagram to the TCP code and

171
00:15:00,519 --> 00:15:07,430
it will be able to parse the segment correctly. The Internet Assigned Numbers Authority (IANA)

172
00:15:07,430 --> 00:15:14,430
defines over 140 different values of Protocol ID, representing different transport protocols.

173
00:15:14,910 --> 00:15:21,910
The Version tells us which version of IP – currently, the legal values are IPv4 and IPv6. This header

174
00:15:23,610 --> 00:15:29,100
is an IPv4 header. We’ll see IPv6 headers in a later video.

175
00:15:29,100 --> 00:15:35,579
The Total packet length can be up 64kBytes including the header and all the data.

176
00:15:35,579 --> 00:15:40,860
The “Time to Live” field helps us to prevent packets accidentally looping in the ntwork

177
00:15:40,860 --> 00:15:43,510
forever. Every router is required to decrement the

178
00:15:43,510 --> 00:15:47,700
TTL field. If it reaches zero, the router should drop the packet.

179
00:15:47,700 --> 00:15:52,180
This way, when the source sends the packet with a fixed TTL value, it is guaranteed to

180
00:15:52,180 --> 00:15:59,180
be destroyed by a router if it starts to travel in loops.

181
00:15:59,639 --> 00:16:04,950
Sometimes a packet is too long for the link it is about to be sent on. The Packet ID,

182
00:16:04,950 --> 00:16:10,899
Flags and Fragment Offset all help routers to fragment IP packets into smaller self-contained

183
00:16:10,899 --> 00:16:17,540
packets if need-be. We will learn how fragmentation works in a later video.

184
00:16:17,540 --> 00:16:22,620
The Type of Service field gives a hint to routers about how important this packet is.

185
00:16:22,620 --> 00:16:27,430
The Header Length tells us how big the header is --- some headers have optional extra fields

186
00:16:27,430 --> 00:16:29,440
to carry extra information.

187
00:16:29,440 --> 00:16:35,139
Finally, a checksum is calculated over the whole header so just in case the header is

188
00:16:35,139 --> 00:16:39,560
corrupted, we are not likely to deliver a packet to the wrong desination by mistake.

189
00:16:39,560 --> 00:16:46,339
In summary, IP is very important: We use it every time we send and receive packets in

190
00:16:46,339 --> 00:16:48,339
the Internet.

191
00:16:48,339 --> 00:16:54,649
IP provides a deliberately simple service. It is a simple, dumb, minimal service with

192
00:16:54,649 --> 00:17:00,610
four main features: It sends datagrams, hop-by-hop across the Internet. The service is unreliable

193
00:17:00,610 --> 00:17:05,790
and best-effort; there is no per-flow state making the protocol connectionless.

194
00:17:05,790 --> 00:17:11,419
At this point, you should feel comfortable with what the IP protocol is, what its service

195
00:17:11,419 --> 00:17:17,079
model is, and how it fits into the Internet 4-layer hierarchy. If you have doubts, I suggest

196
00:17:17,079 --> 00:17:21,400
you re-watch this video and the one before it on the 4-layer model.

197
00:17:21,400 --> 00:17:26,980
You’ll also find lots of good references about how IPv4 works. Any good networking

198
00:17:26,980 --> 00:17:31,990
textbook will devote considerable space to explaining what IP is, and why it was designed

199
00:17:31,990 --> 00:17:36,880
this way. For example, Chapter 4 of the 6th Edition of “Computer Networking: A top down

200
00:17:36,880 --> 00:17:41,030
approach” by Kurose and Ross. You will also find a brief explanation on Wikipedia.

