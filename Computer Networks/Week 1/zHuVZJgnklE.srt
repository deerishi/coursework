0
00:00:00,690 --> 00:00:05,320
Nick: This video is about the architectural principle we call encapsulation. Encapsulation

1
00:00:05,320 --> 00:00:10,469
is the result of what happens when you combine layers and packet switching. We want to break

2
00:00:10,469 --> 00:00:16,580
up our data into discrete units, called packets. However, each packet contains data from multiple

3
00:00:16,580 --> 00:00:23,540
layers. When you send a TCP segment, for example, it’s inside an IP packet, which is inside

4
00:00:23,540 --> 00:00:28,970
an Ethernet frame. Encapsulation is how this works. Encapsulation is the principle by which

5
00:00:28,970 --> 00:00:33,600
you organize information in packets so that you can maintain layers, yet let them share

6
00:00:33,600 --> 00:00:36,170
the contents of your packets.

7
00:00:36,170 --> 00:00:42,339
Phil: Recall that layering lets you take a complex system and break it into smaller parts.

8
00:00:42,339 --> 00:00:46,379
Each layer provides a service, an abstraction of the network to the layers above it. It

9
00:00:46,379 --> 00:00:50,780
provides this abstraction by using the layer below it. Each layer is self-contained, so

10
00:00:50,780 --> 00:00:54,449
as long as it provides the service expected of it, layers above don’t need to worry

11
00:00:54,449 --> 00:01:00,249
about how. This separation of concerns means each layer can evolve independently. Just

12
00:01:00,249 --> 00:01:04,360
as IP, at the network layer, doesn’t need to have to worry about changes to TCP at the

13
00:01:04,360 --> 00:01:09,270
transport layer, application layers such as HTTP don’t have to worry about changes to

14
00:01:09,270 --> 00:01:14,350
TCP. For example, in the past few years most operating systems have changed the exact TCP

15
00:01:14,350 --> 00:01:19,350
algorithms they used, to better handle increasing network speeds. But a web browser works fine

16
00:01:19,350 --> 00:01:22,830
using both the old algorithms and the new ones.

17
00:01:22,830 --> 00:01:26,890
Note that this layer picture has the 7 Layer OSI model.

18
00:01:26,890 --> 00:01:30,410
Nick: So let’s scrunch back down to the 4 layer model.

19
00:01:30,410 --> 00:01:34,500
Nick: Encapsulation is the principle that lets us take protocol layers and let them

20
00:01:34,500 --> 00:01:38,660
easily share the storage within a packet. It’s how layering manifests in the actual

21
00:01:38,660 --> 00:01:44,860
data representation. The way this works is each protocol layer has some headers, followed

22
00:01:44,860 --> 00:01:50,340
by its payload, followed by some footers. For example, an IP packet header has a source

23
00:01:50,340 --> 00:01:56,110
address and a destination address. To send a TCP segment with IP, we make the TCP format

24
00:01:56,110 --> 00:02:02,390
the payload of the IP packet. In this way, the IP packet “encapsulates” the TCP segment.

25
00:02:02,390 --> 00:02:07,750
IP doesn’t know or care what its payload is, it just delivers packets to an end host.

26
00:02:07,750 --> 00:02:12,700
When the packet arrives, the host looks inside the payload, sees that it’s a TCP segment,

27
00:02:12,700 --> 00:02:14,420
and processes it accordingly.

28
00:02:14,420 --> 00:02:19,200
Nick: so here’s a more complete example. Let’s say that you’re browsing the web

29
00:02:19,200 --> 00:02:25,720
using a computer connected through WiFi, wireless Ethernet. Your web browser generates an HTTP

30
00:02:25,720 --> 00:02:32,020
GET request. This HTTP GET request is the payload of a TCP segment. The TCP segment,

31
00:02:32,020 --> 00:02:38,840
encapsulating the HTTP GET, is the payload of an IP packet. This IP packet, encapsulating

32
00:02:38,840 --> 00:02:45,340
the TCP segment and the HTTP GET, is the payload of a WiFi frame. If you were to look at the

33
00:02:45,340 --> 00:02:51,069
bytes your computer sends, they’d look like this. The outermost encapsulating format is

34
00:02:51,069 --> 00:02:56,730
the WiFi frame, inside of which is an IP packet, inside of which is a TCP segment, inside of

35
00:02:56,730 --> 00:02:59,530
which is an HTTP GET.

36
00:02:59,530 --> 00:03:04,080
Phil: How Nick has drawn this packet brings up something you might find confusing! It

37
00:03:04,080 --> 00:03:08,870
turns out there are two ways to draw packets. The difference comes from background and what

38
00:03:08,870 --> 00:03:13,310
part of the system you work on. Nick has drawn the packet here where the headers are on the

39
00:03:13,310 --> 00:03:18,069
right. The first bit of the packet is on the right and the last bit of the packet is on

40
00:03:18,069 --> 00:03:18,550
the left.

41
00:03:18,550 --> 00:03:23,270
Nick: This makes total sense! As a router or switch sends a packet, we draw the packet

42
00:03:23,270 --> 00:03:28,090
moving from left to right. So the first bit to leave the router or switch is at the far

43
00:03:28,090 --> 00:03:28,910
right.

44
00:03:28,910 --> 00:03:33,020
Phil:but I draw packets the other way, where the headers are on the left and the footers

45
00:03:33,020 --> 00:03:34,970
on the right. Like this.

46
00:03:34,970 --> 00:03:39,750
Phil: This approach comes from software. It’s what you’ll see when you read IETF documents

47
00:03:39,750 --> 00:03:44,099
and many other protocol specifications. The idea is that the beginning of the packet comes

48
00:03:44,099 --> 00:03:49,239
at address zero. So the first byte of a header is at address zero. Since addresses increase

49
00:03:49,239 --> 00:03:52,840
from left to right, this means the beginning of the packet is on the left and the end of

50
00:03:52,840 --> 00:03:53,910
the packet is on the right.

51
00:03:53,910 --> 00:03:58,090
Nick: There isn’t a right way or a wrong way here. Both ways of drawing packets are

52
00:03:58,090 --> 00:04:01,180
valuable, and depend on what you’re using the drawing for. You should be comfortable

53
00:04:01,180 --> 00:04:04,470
with both. I’ll generally draw headers on the right.

54
00:04:04,470 --> 00:04:07,900
Phil: And I’ll generally draw them on the left. Nick’s background is electrical engineering

55
00:04:07,900 --> 00:04:12,379
and switch design, mine is computer science and protocol software.

56
00:04:12,379 --> 00:04:19,320
Phil: Now let’s go back to Nick’s example, of an HTTP GET inside a TCP segment inside

57
00:04:19,320 --> 00:04:23,810
an IP packet inside a WiFi frame. Let’s see what this looks like in an actual network

58
00:04:23,810 --> 00:04:28,000
with Wireshark. Before we started recording, I turned on Wireshark and recorded a packet

59
00:04:28,000 --> 00:04:34,490
trace of a web request. Let’s just look at one packet. Here, we can see how Wireshark

60
00:04:34,490 --> 00:04:41,030
tells us that it’s an Ethernet frame, inside which is an IP packet, inside which is a TCP

61
00:04:41,030 --> 00:04:47,070
segment, inside which is an HTTP GET. If I click on each of these protocol headers, then

62
00:04:47,070 --> 00:04:52,320
wireshark actually highlights where they are in the packet bytes, this gobbledigook below.

63
00:04:52,320 --> 00:04:59,320
WiFi comes first. Inside WiFi is IP. Inside IP is TCP. And inside TCP we can see the text

64
00:05:03,380 --> 00:05:07,600
of our HTTP GET! Phil: This very simple approach of encapsulating

65
00:05:07,600 --> 00:05:12,070
protocols within each other gives you tremendous flexibility. So far we’ve been talking about

66
00:05:12,070 --> 00:05:16,449
the 4 layer model as something completely static and inflexible. In practice, it’s

67
00:05:16,449 --> 00:05:23,260
not like that. You can actually use encapsulation to recursively layer protocols. For example,

68
00:05:23,260 --> 00:05:27,780
something that’s very commonly used today in offices and businesses is something called

69
00:05:27,780 --> 00:05:34,780
a Virtual Private Network. With a Virtual Private Network, you open a secure connection

70
00:05:35,010 --> 00:05:39,630
to a network you trust, such as your office, for example using Transport Layer Security

71
00:05:39,630 --> 00:05:45,840
(TLS). When you communicate with the Internet and send IP packets, rather than send them

72
00:05:45,840 --> 00:05:52,229
normally, you send them inside this VPN connection. So the IP packets go to your office network.

73
00:05:52,229 --> 00:05:55,830
At that point the office network can route them normally. This lets you do things like

74
00:05:55,830 --> 00:06:00,960
access private, protected network resources in your office. Rather than sprinkle network

75
00:06:00,960 --> 00:06:04,330
protections everywhere, you just have to be careful with one service, the service that

76
00:06:04,330 --> 00:06:08,790
lets people log into the network over the virtual private network. You do this with

77
00:06:08,790 --> 00:06:14,750
a gateway, a computer that accepts connections from permitted VPN clients and forwards their

78
00:06:14,750 --> 00:06:17,900
traffic into the private network.

79
00:06:17,900 --> 00:06:23,190
So what does that look like? Let’s say I’m accessing my internal company website. Well,

80
00:06:23,190 --> 00:06:28,770
my web browser generates an HTTP GET. Like usual, it puts this inside a TCP segment,

81
00:06:28,770 --> 00:06:34,199
which it puts inside an IP packet destined to the company’s internal web server. But

82
00:06:34,199 --> 00:06:39,150
rather than put this IP packet inside a link layer frame -- I can’t directly communicate

83
00:06:39,150 --> 00:06:46,150
with the internal web server -- my computer puts the IP packet inside a TLS segment. TLS

84
00:06:47,110 --> 00:06:52,759
protects the message and keeps it secret. This TLS session is inside a TCP stream that

85
00:06:52,759 --> 00:06:58,360
terminates at the virtual private network gateway. So *outer* TCP segment is inside

86
00:06:58,360 --> 00:07:03,740
an IP packet destined to the virtual private network gateway. We put this outer IP packet

87
00:07:03,740 --> 00:07:09,490
inside a link frame and send it to the next hop. So it looks like this:

88
00:07:09,490 --> 00:07:16,490
HTTP inside TCP inside IP inside TLS inside TCP inside IP inside Ethernet.

89
00:07:34,820 --> 00:07:41,820
Nick: Now you’ve heard about encapsulation, the principle that unifies layering and packet

90
00:07:51,919 --> 00:07:57,229
switching. Encapsulation is how we take protocol layers and assemble them into packets in a

91
00:07:57,229 --> 00:08:02,509
way that’s flexible and maintains their separation of concerns. You saw an example

92
00:08:02,509 --> 00:08:07,740
of a computer can encapsulate a web request, as well as an example how one can use encapsulation

93
00:08:07,740 --> 00:08:10,879
in a more complex way for something like a virtual private network.

