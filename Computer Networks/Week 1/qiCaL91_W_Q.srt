0
00:00:00,690 --> 00:00:05,500
The Address Resolution Protocol, or ARP, is the mechanism by which the network layer can

1
00:00:05,500 --> 00:00:09,690
discover the link address associated with a network address it’s directly connected

2
00:00:09,690 --> 00:00:14,440
to. Put another way, it’s how a device gets an answer to the question: “I have an IP

3
00:00:14,440 --> 00:00:20,240
packet whose next hop is this address -- what link address should I send it to?”

4
00:00:20,240 --> 00:00:25,720
ARP is needed because each protocol layer has its own names and addresses. An IP address

5
00:00:25,720 --> 00:00:30,470
is a network-level address. It describes a host, a unique destination at the network

6
00:00:30,470 --> 00:00:35,039
layer. A link address, in contrast, describes a particular network card, a unique device

7
00:00:35,039 --> 00:00:40,659
that sends and receives link layer frames. Ethernet, for example, has 48 bit addresses.

8
00:00:40,659 --> 00:00:44,300
Whenever you buy an Ethernet card, it’s been preconfigured with a unique Ethernet

9
00:00:44,300 --> 00:00:50,329
address. So an IP address says “this host”, while an Ethernet address says “this Ethernet

10
00:00:50,329 --> 00:00:52,809
card.”

11
00:00:52,809 --> 00:00:57,280
48-bit Ethernet addresses are usually written as a colon delimited set of 6 octets written

12
00:00:57,280 --> 00:01:04,280
in hexidecimal, such as 0:13:72:4c:d9:6a as in the source, or 9:9:9:9:9:9 as in the destination.

13
00:01:13,620 --> 00:01:17,530
One thing that can be confusing is that while these link layer and network layer addresses

14
00:01:17,530 --> 00:01:22,440
are completely decoupled with respect to the protocol layers, in terms of assignment and

15
00:01:22,440 --> 00:01:26,850
management they might not be. For example, it’s very common for a single host to have

16
00:01:26,850 --> 00:01:32,130
multiple IP addresses -- one for each of its interfaces. It needs to because of the concept

17
00:01:32,130 --> 00:01:39,130
of a netmask. For example, look at this hypothetical setup. The gateway, in the middle, has a single

18
00:01:39,180 --> 00:01:45,700
IP address: 192.168.0.1. It has two network cards, one connecting it to the destination

19
00:01:45,700 --> 00:01:52,700
171.43.22.5, one connecting it to the source, 192.168.0.5.

20
00:01:57,140 --> 00:02:04,140
The address 192.168.0.1 can really only be in one of these networks, the source network.

21
00:02:05,250 --> 00:02:12,250
The netmask needed for 192.168.0.1 to be in the same network as 171.43.22.5 is 128.0.0.0,

22
00:02:15,530 --> 00:02:20,750
or just one bit of netmask! But it can’t be that all IP addresses whose first bit is

23
00:02:20,750 --> 00:02:27,750
1 are in the same network as 171.43.22.5 -- 192.168.0.5, for example, needs to be reached through the

24
00:02:29,110 --> 00:02:32,870
gateway.

25
00:02:32,870 --> 00:02:37,690
So instead we often see setups like this, where the gateway or router has multiple interfaces,

26
00:02:37,690 --> 00:02:41,650
each with their own link layer address to identify the card, and also each with their

27
00:02:41,650 --> 00:02:45,709
own network layer address to identify the host within the network that card is part

28
00:02:45,709 --> 00:02:52,709
of. For the gateway, the left interface has IP address 192.168.0.1, while the right interface

29
00:02:53,370 --> 00:02:58,480
has IP address 171.43.22.8.

30
00:02:58,480 --> 00:03:02,090
The fact that link layer and network layer addresses are decoupled logically but coupled

31
00:03:02,090 --> 00:03:06,599
in practice is in some ways a historical artifact. When the Internet started, there were many

32
00:03:06,599 --> 00:03:10,530
link layers, and it wanted to be able to run on top of all of them. These link layers weren’t

33
00:03:10,530 --> 00:03:15,110
going to suddenly start using IP addresses instead of their own addressing scheme. Furthermore,

34
00:03:15,110 --> 00:03:18,280
there turns out to be a bunch of situations where having a separate link layer address

35
00:03:18,280 --> 00:03:22,390
is very valuable. For example, when I register a computer with Stanford’s network, I register

36
00:03:22,390 --> 00:03:25,770
its link layer address -- the address of the network card.

37
00:03:25,770 --> 00:03:29,599
So what does this mean in practice? Let’s say node A, on the left, wants to send a packet

38
00:03:29,599 --> 00:03:36,130
to node B, on the right. It’s going to generate an IP packet with source address 192.168.0.5

39
00:03:36,130 --> 00:03:41,440
and destination address 171.43.22.5.

40
00:03:41,440 --> 00:03:46,069
Node A checks whether the destination address is in the same network. The netmask tells

41
00:03:46,069 --> 00:03:53,069
it that the destination address is in a different network: 255.255.255.0. This means node A

42
00:03:53,280 --> 00:04:00,280
needs to send the packet through the gateway, or 192.168.0.1. To do this, it sends a packet

43
00:04:00,599 --> 00:04:07,599
whose network-layer destination is 171.43.22.5 but whose link-layer destination is the link

44
00:04:08,209 --> 00:04:15,209
layer address of the gateway. So the packet has a network layer destination 171.43.22.5

45
00:04:15,840 --> 00:04:22,840
and a link layer destination 0:18:e7:f3:ce:1a. The network layer source is 192.168.0.5 and

46
00:04:26,910 --> 00:04:30,510
the link layer source is 0:13:72:4c:d9:6a.

47
00:04:30,510 --> 00:04:37,510
So we have an IP packet from A to B, encapsulated inside a link layer frame from A to the left

48
00:04:40,750 --> 00:04:45,070
gateway interface. When the packet reaches the gateway, the gateway looks up the next

49
00:04:45,070 --> 00:04:50,490
hop, decides it’s node B, and puts the IP packet inside a link layer frame to B. So

50
00:04:50,490 --> 00:04:56,210
this second IP packet from A to B is inside a link layer from from the right gateway interface

51
00:04:56,210 --> 00:05:01,850
to B.

52
00:05:01,850 --> 00:05:06,770
So here we get to the problem ARP solves. My client knows that it needs to send a packet

53
00:05:06,770 --> 00:05:13,770
through the gateway that has IP address 192.168.0.1. To do so, however, it needs to have the link

54
00:05:14,190 --> 00:05:20,080
layer address associated with 192.168.0.1. How does it get this address? We somehow need

55
00:05:20,080 --> 00:05:25,460
to be able to map a layer 3, network layer, address, to its corresponding layer 2, link

56
00:05:25,460 --> 00:05:31,120
layer, address. We do this with a protocol called ARP, or the Address Resolution Protocol.

57
00:05:31,120 --> 00:05:36,560
ARP is a simple request-reply protocol. Every node keeps a cache of mappings from IP addresses

58
00:05:36,560 --> 00:05:41,120
on its network to link layer addresses. If a node needs to send a packet to an IP address

59
00:05:41,120 --> 00:05:45,870
it doesn’t have a mapping for, it sends a request: “Who has network address X?”

60
00:05:45,870 --> 00:05:52,070
The node that has that network address responds, saying “I have network address X.” The

61
00:05:52,070 --> 00:05:55,650
response includes the link layer address. On receiving the response, the requester can

62
00:05:55,650 --> 00:05:59,220
generate the mapping and send the packet.

63
00:05:59,220 --> 00:06:03,970
So that every node hears the request, a node sends requests to a link layer broadcast address.

64
00:06:03,970 --> 00:06:06,310
Every node in the network will hear the packet.

65
00:06:06,310 --> 00:06:11,360
Furthermore, ARP is structured so that it contains redundant data. The request contains

66
00:06:11,360 --> 00:06:15,699
the network and link layer address of the requestor. That way, when nodes hear a request

67
00:06:15,699 --> 00:06:20,669
(since it’s broadcast), they can insert or refresh a mapping in their cache. Nodes

68
00:06:20,669 --> 00:06:25,449
*only* respond to requests for themselves. This means, assuming nobody is generating

69
00:06:25,449 --> 00:06:29,639
packets incorrectly, the only way you can generate a mapping for another node is in

70
00:06:29,639 --> 00:06:35,400
response to a packet that node sends. So if that node crashes or disconnects, its state

71
00:06:35,400 --> 00:06:39,210
will inevitably leave the network when all of the cached mappings expire. This makes

72
00:06:39,210 --> 00:06:42,370
debugging and troubleshooting ARP much easier.

73
00:06:42,370 --> 00:06:46,360
So how long do these dynamically discovered mappings last? It depends on the device: some

74
00:06:46,360 --> 00:06:50,720
versions of Mac OSX, for example, keep them around for 20 minutes, while some Cisco devices

75
00:06:50,720 --> 00:06:55,650
use timeouts of 4 hours. The assumption is that these mappings do not change very frequently.

76
00:06:55,650 --> 00:07:00,509
This is what an ARP packet actually looks like. It has 10 fields. The hardware field

77
00:07:00,509 --> 00:07:05,070
states what link layer this request or response is for. The protocol field states what network

78
00:07:05,070 --> 00:07:09,870
protocol this request or response is for. The length fields specify how many bytes long

79
00:07:09,870 --> 00:07:14,190
the link layer and network layer addresses are. The opcode specifies whether the packet

80
00:07:14,190 --> 00:07:16,820
is a request or response.

81
00:07:16,820 --> 00:07:21,090
The four address fields are for requesting and specifying the mappings.

82
00:07:21,090 --> 00:07:24,930
Remember, all of these fields are stored in network order, or big endian. So if I have

83
00:07:24,930 --> 00:07:27,669
an opcode of 15, it will be stored as 0x000f in the opcode field.

84
00:07:27,669 --> 00:07:30,070
The full details of ARP are in IETF Request for Comments, RFC, 826. I’ll just go over

85
00:07:30,070 --> 00:07:30,550
a simple request/response exchange.

86
00:07:30,550 --> 00:07:33,199
So let’s say our client wants to send a packet to the broader Internet through its

87
00:07:33,199 --> 00:07:34,740
gateway. But it doesn’t have the gateway’s Ethernet address.

88
00:07:34,740 --> 00:07:36,500
The client will generate an ARP request packet whose link layer source address is its address:

89
00:07:36,500 --> 00:07:36,750
68:a8:6d:05:82:22. The destination link layer address is the broadcast address: ff:ff:ff:ff:ff:ff,

90
00:07:36,729 --> 00:07:36,979
all 1s.

91
00:07:36,759 --> 00:07:41,139
The ARP request will specify that the hardware is Ethernet, which is value 1, the protocol

92
00:07:41,139 --> 00:07:48,139
is IP, which is value 0x0800, the hardware address length is 6, and the protocol length

93
00:07:48,350 --> 00:07:55,330
is 4. The opcode will be request, whose value is 1. The ARP source hardware field will be

94
00:07:55,330 --> 00:08:02,330
the requester’s Ethernet address, 68:a8:6d:05:85:22. The source protocol field is the requester’s

95
00:08:05,009 --> 00:08:10,910
IP address: 192.168.0.5. The destination hardware address can be set to anything -- it is what

96
00:08:10,910 --> 00:08:15,440
the packet is trying to discover. The destination protocol address is the address the client

97
00:08:15,440 --> 00:08:22,440
is trying to find a mapping for: 192.168.0.1. The client sends this frame on the Ethernet.

98
00:08:22,720 --> 00:08:29,699
Every node in the network receives it and refreshes its mapping between its link address,

99
00:08:29,699 --> 00:08:36,699
68:a8:6d:05:85:22, and its network address, 192.168.0.5, or inserts a mapping if it doesn’t

100
00:08:52,649 --> 00:08:56,130
have one.

101
00:08:56,130 --> 00:09:01,070
The gateway sees that the request is for its IP address and so generates a reply.

102
00:09:01,070 --> 00:09:05,140
Like the request, the ARP reply will specify that the hardware is Ethernet, which is value

103
00:09:05,140 --> 00:09:11,050
1, the protocol is IP, which is value 0x0800, the hardware address length is 6, and the

104
00:09:11,050 --> 00:09:15,680
protocol length is 4. The opcode will be reply, whose value is 2.

105
00:09:15,680 --> 00:09:22,680
The ARP source hardware field will be the replier’s Ethernet address, 0:18:e7:f3:ce:1a.

106
00:09:23,260 --> 00:09:30,170
The source protocol field is the answer: 192.168.0.1. The destination hardware address is the source

107
00:09:30,170 --> 00:09:37,170
hardware address of the request: 68:a8:6d:05:85:22. The destination protocol address is the source

108
00:09:37,290 --> 00:09:40,399
protocol address of the request: 192.168.0.5.

109
00:09:40,399 --> 00:09:45,990
It’s an open question what link layer address you send the response to. The original ARP

110
00:09:45,990 --> 00:09:50,130
specification stated that the replier should send it to the requester’s link layer address,

111
00:09:50,130 --> 00:09:54,440
so unicast. It’s common today to broadcast it, however, as doing so can more aggressively

112
00:09:54,440 --> 00:09:58,760
replace cache entries if the mapping needs to change. Nodes can also send what are called

113
00:09:58,760 --> 00:10:02,750
gratuitous ARP packets, requesting non-existent mappings, in order to advertise themselves

114
00:10:02,750 --> 00:10:03,959
on a network.

115
00:10:03,959 --> 00:10:09,070
So we’ve seen how, in order to route packets, one needs to be able to map network layer

116
00:10:09,070 --> 00:10:13,760
addresses to link layer addresses. The Address Resolution Protocol, or ARP, provides this

117
00:10:13,760 --> 00:10:18,930
service through a simple request-reply exchange. If a node needs to send a packet to or through

118
00:10:18,930 --> 00:10:22,560
an IP address whose link layer address it does not have, it can request the address

119
00:10:22,560 --> 00:10:23,270
through ARP.

